package by.org.cgm.quakeviewer.quake;import com.mapswithme.maps.api.MWMPoint;import java.io.Serializable;import java.util.ArrayList;import java.util.List;import by.org.cgm.jdbf.JdbfTask;/** * Helper class for providing sample content for user interfaces created by * Android template wizards. * <p> */public class QuakeContent {    /**     * An array of sample (quake) items.     */    public static List<QuakeItem> QUAKES = new ArrayList<QuakeItem>();    private static void addItem(QuakeItem item) {        QUAKES.add(item);    }    public static boolean init() {        if (QUAKES.size()>0) QUAKES.clear();        try {            for (JdbfTask.QuakeRecord rec : JdbfTask.records) {                addItem(new QuakeItem(                        rec.N,                        Double.parseDouble(rec.Lon),                        Double.parseDouble(rec.Lat),                        rec.DateTime +                                ((!rec.MPSP.equals("0.0")) ? "\nмагнитуда " + rec.MPSP : "") +                                ((!rec.Depth.equals("0")) ? "\nглубина " + rec.Depth + " км" : ""),                        (rec.LocRus.length()>0) ? rec.LocRus : rec.Loc                ));            }        } catch (Exception ex) {            ex.printStackTrace();            return false;        }        return true;    }    public static QuakeItem getItemFromPoint(MWMPoint point) {        for (QuakeItem quake : QUAKES)            if (quake.id.equals(point.getId()))                return quake;        return null;    }    /**     * A quake item representing a piece of content.     */    public static class QuakeItem implements Serializable {        public String id;        public String location;        public double lat, lon;        public String content;        public QuakeItem(String id, double longitude, double latitude, String content, String location) {            this.id = id;            lon = longitude;            lat = latitude;            this.content = content;            this.location = location;        }        public MWMPoint toMWMPoint() {            return new MWMPoint(lat, lon, content, id);        }        @Override        public String toString() {            return location;        }    }}