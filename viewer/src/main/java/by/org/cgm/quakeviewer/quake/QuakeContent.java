package by.org.cgm.quakeviewer.quake;import com.mapswithme.maps.api.MWMPoint;import java.io.Serializable;import java.util.ArrayList;import java.util.List;import by.org.cgm.jdbf.JdbfTask;/** * Helper class for providing sample content for user interfaces created by * Android template wizards. * <p> */public class QuakeContent {    /**     * An array of sample (quake) items.     */    public static List<QuakeItem> QUAKES = new ArrayList<QuakeItem>();    private static void addItem(QuakeItem item) {        QUAKES.add(item);    }    public static boolean init() {        if (QUAKES.size()>0) QUAKES.clear();        try {            for (JdbfTask.QuakeRecord rec : JdbfTask.records) {                if (rec instanceof JdbfTask.QuakeRecordEarth) {                    JdbfTask.QuakeRecordEarth earth = (JdbfTask.QuakeRecordEarth) rec;                    addItem(new QuakeItem(                            earth.N,                            Double.parseDouble(earth.Lon),                            Double.parseDouble(earth.Lat),                            earth.DateTime +                                    ((!earth.MPSP.equals("0.0")) ? "\nМагнитуда: " + earth.MPSP : "") +                                    ((!earth.Depth.equals("0")) ? "\nГлубина: " + earth.Depth + " км" : ""),                            (earth.LocRus.length() > 0) ? earth.LocRus : earth.Loc                    ));                } else {                    JdbfTask.QuakeRecordBLR blr = (JdbfTask.QuakeRecordBLR) rec;                    addItem(new QuakeItem(                            blr.N,                            Double.parseDouble(blr.Lon),                            Double.parseDouble(blr.Lat),                            blr.Date + " " + blr.Time +                                    ((!blr.M.equals("0.0")) ? "\nМагнитуда: " + blr.M : "") +                                    ((!blr.Kp.equals("0")) ? "\nКласс: " + blr.Kp : ""),                            (blr.Loc.length() > 0) ? blr.Loc : String.valueOf(blr.N)                    ));                }            }        } catch (Exception ex) {            ex.printStackTrace();            return false;        }        return true;    }    public static QuakeItem getItemFromPoint(MWMPoint point) {        for (QuakeItem quake : QUAKES)            if (quake.id.equals(point.getId()))                return quake;        return null;    }    /**     * A quake item representing a piece of content.     */    public static class QuakeItem implements Serializable {        public String id;        public String title;        public double lat, lon;        public String content;        public QuakeItem(String id, double longitude, double latitude, String content, String title) {            this.id = id;            lon = longitude;            lat = latitude;            this.content = content;            this.title = title;        }        public MWMPoint toMWMPoint() {            return new MWMPoint(lat, lon, content, id);        }        @Override        public String toString() {            return title;        }    }}